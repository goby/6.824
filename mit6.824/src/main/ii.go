package main

import "os"
import "fmt"
import "mapreduce"
import "sort"
import "unicode"

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	contentLength := len(value)
	startPos := 0
	dict := make(map[string]string)
	for i := 0; i < contentLength; i++ {
		for i < contentLength && unicode.IsLetter(rune(value[i])) {
			i++
		}
		if startPos < i {
			if _, ok := dict[value[startPos:i]]; !ok {
				dict[value[startPos:i]] = document
			}
		}
		startPos = i + 1
	}

	for k, v := range dict {
		kv := mapreduce.KeyValue{k, v}
		res = append(res, kv)
	}
	return res
}

type StringList []string

func (s StringList) Len() int           { return len(s) }
func (s StringList) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
func (s StringList) Less(i, j int) bool { return s[i] < s[j] }

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
    // XXX: dirty code
    sort.Sort(StringList(values))
    ret := ""
    valueLength := 0
    for _, c := range values {
        if len(c) > 0 {
            ret = fmt.Sprintf("%s%s,", ret, c)
            valueLength++
        }
    }
    if valueLength > 0 {
        ret = ret[0: len(ret)-1]
        ret = fmt.Sprintf("%d %s", valueLength, ret)
    } else {
        ret = "0"
    }

    return ret
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
